// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/PuppetMasterService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace PuppetMaster {
  public static partial class PuppetMasterService
  {
    static readonly string __ServiceName = "PuppetMasterService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::PuppetMaster.ReplicationFactorRequest> __Marshaller_ReplicationFactorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PuppetMaster.ReplicationFactorRequest.Parser));
    static readonly grpc::Marshaller<global::PuppetMaster.ReplicationFactorReply> __Marshaller_ReplicationFactorReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PuppetMaster.ReplicationFactorReply.Parser));
    static readonly grpc::Marshaller<global::PuppetMaster.PartitionRequest> __Marshaller_PartitionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PuppetMaster.PartitionRequest.Parser));
    static readonly grpc::Marshaller<global::PuppetMaster.PartitionReply> __Marshaller_PartitionReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PuppetMaster.PartitionReply.Parser));
    static readonly grpc::Marshaller<global::PuppetMaster.StatusRequest> __Marshaller_StatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PuppetMaster.StatusRequest.Parser));
    static readonly grpc::Marshaller<global::PuppetMaster.StatusReply> __Marshaller_StatusReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PuppetMaster.StatusReply.Parser));
    static readonly grpc::Marshaller<global::PuppetMaster.CrashRequest> __Marshaller_CrashRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PuppetMaster.CrashRequest.Parser));
    static readonly grpc::Marshaller<global::PuppetMaster.CrashReply> __Marshaller_CrashReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PuppetMaster.CrashReply.Parser));
    static readonly grpc::Marshaller<global::PuppetMaster.FreezeRequest> __Marshaller_FreezeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PuppetMaster.FreezeRequest.Parser));
    static readonly grpc::Marshaller<global::PuppetMaster.FreezeReply> __Marshaller_FreezeReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PuppetMaster.FreezeReply.Parser));
    static readonly grpc::Marshaller<global::PuppetMaster.UnfreezeRequest> __Marshaller_UnfreezeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PuppetMaster.UnfreezeRequest.Parser));
    static readonly grpc::Marshaller<global::PuppetMaster.UnfreezeReply> __Marshaller_UnfreezeReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PuppetMaster.UnfreezeReply.Parser));

    static readonly grpc::Method<global::PuppetMaster.ReplicationFactorRequest, global::PuppetMaster.ReplicationFactorReply> __Method_ReplicationFactor = new grpc::Method<global::PuppetMaster.ReplicationFactorRequest, global::PuppetMaster.ReplicationFactorReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReplicationFactor",
        __Marshaller_ReplicationFactorRequest,
        __Marshaller_ReplicationFactorReply);

    static readonly grpc::Method<global::PuppetMaster.PartitionRequest, global::PuppetMaster.PartitionReply> __Method_Partition = new grpc::Method<global::PuppetMaster.PartitionRequest, global::PuppetMaster.PartitionReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Partition",
        __Marshaller_PartitionRequest,
        __Marshaller_PartitionReply);

    static readonly grpc::Method<global::PuppetMaster.StatusRequest, global::PuppetMaster.StatusReply> __Method_Status = new grpc::Method<global::PuppetMaster.StatusRequest, global::PuppetMaster.StatusReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Status",
        __Marshaller_StatusRequest,
        __Marshaller_StatusReply);

    static readonly grpc::Method<global::PuppetMaster.CrashRequest, global::PuppetMaster.CrashReply> __Method_Crash = new grpc::Method<global::PuppetMaster.CrashRequest, global::PuppetMaster.CrashReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Crash",
        __Marshaller_CrashRequest,
        __Marshaller_CrashReply);

    static readonly grpc::Method<global::PuppetMaster.FreezeRequest, global::PuppetMaster.FreezeReply> __Method_Freeze = new grpc::Method<global::PuppetMaster.FreezeRequest, global::PuppetMaster.FreezeReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Freeze",
        __Marshaller_FreezeRequest,
        __Marshaller_FreezeReply);

    static readonly grpc::Method<global::PuppetMaster.UnfreezeRequest, global::PuppetMaster.UnfreezeReply> __Method_Unfreeze = new grpc::Method<global::PuppetMaster.UnfreezeRequest, global::PuppetMaster.UnfreezeReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Unfreeze",
        __Marshaller_UnfreezeRequest,
        __Marshaller_UnfreezeReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::PuppetMaster.PuppetMasterServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PuppetMasterService</summary>
    [grpc::BindServiceMethod(typeof(PuppetMasterService), "BindService")]
    public abstract partial class PuppetMasterServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::PuppetMaster.ReplicationFactorReply> ReplicationFactor(global::PuppetMaster.ReplicationFactorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PuppetMaster.PartitionReply> Partition(global::PuppetMaster.PartitionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PuppetMaster.StatusReply> Status(global::PuppetMaster.StatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PuppetMaster.CrashReply> Crash(global::PuppetMaster.CrashRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PuppetMaster.FreezeReply> Freeze(global::PuppetMaster.FreezeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PuppetMaster.UnfreezeReply> Unfreeze(global::PuppetMaster.UnfreezeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PuppetMasterService</summary>
    public partial class PuppetMasterServiceClient : grpc::ClientBase<PuppetMasterServiceClient>
    {
      /// <summary>Creates a new client for PuppetMasterService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PuppetMasterServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PuppetMasterService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PuppetMasterServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PuppetMasterServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PuppetMasterServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::PuppetMaster.ReplicationFactorReply ReplicationFactor(global::PuppetMaster.ReplicationFactorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReplicationFactor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PuppetMaster.ReplicationFactorReply ReplicationFactor(global::PuppetMaster.ReplicationFactorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReplicationFactor, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PuppetMaster.ReplicationFactorReply> ReplicationFactorAsync(global::PuppetMaster.ReplicationFactorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReplicationFactorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PuppetMaster.ReplicationFactorReply> ReplicationFactorAsync(global::PuppetMaster.ReplicationFactorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReplicationFactor, null, options, request);
      }
      public virtual global::PuppetMaster.PartitionReply Partition(global::PuppetMaster.PartitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Partition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PuppetMaster.PartitionReply Partition(global::PuppetMaster.PartitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Partition, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PuppetMaster.PartitionReply> PartitionAsync(global::PuppetMaster.PartitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PartitionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PuppetMaster.PartitionReply> PartitionAsync(global::PuppetMaster.PartitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Partition, null, options, request);
      }
      public virtual global::PuppetMaster.StatusReply Status(global::PuppetMaster.StatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Status(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PuppetMaster.StatusReply Status(global::PuppetMaster.StatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Status, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PuppetMaster.StatusReply> StatusAsync(global::PuppetMaster.StatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PuppetMaster.StatusReply> StatusAsync(global::PuppetMaster.StatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Status, null, options, request);
      }
      public virtual global::PuppetMaster.CrashReply Crash(global::PuppetMaster.CrashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Crash(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PuppetMaster.CrashReply Crash(global::PuppetMaster.CrashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Crash, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PuppetMaster.CrashReply> CrashAsync(global::PuppetMaster.CrashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CrashAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PuppetMaster.CrashReply> CrashAsync(global::PuppetMaster.CrashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Crash, null, options, request);
      }
      public virtual global::PuppetMaster.FreezeReply Freeze(global::PuppetMaster.FreezeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Freeze(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PuppetMaster.FreezeReply Freeze(global::PuppetMaster.FreezeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Freeze, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PuppetMaster.FreezeReply> FreezeAsync(global::PuppetMaster.FreezeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FreezeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PuppetMaster.FreezeReply> FreezeAsync(global::PuppetMaster.FreezeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Freeze, null, options, request);
      }
      public virtual global::PuppetMaster.UnfreezeReply Unfreeze(global::PuppetMaster.UnfreezeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Unfreeze(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PuppetMaster.UnfreezeReply Unfreeze(global::PuppetMaster.UnfreezeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Unfreeze, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PuppetMaster.UnfreezeReply> UnfreezeAsync(global::PuppetMaster.UnfreezeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PuppetMaster.UnfreezeReply> UnfreezeAsync(global::PuppetMaster.UnfreezeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Unfreeze, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PuppetMasterServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PuppetMasterServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PuppetMasterServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ReplicationFactor, serviceImpl.ReplicationFactor)
          .AddMethod(__Method_Partition, serviceImpl.Partition)
          .AddMethod(__Method_Status, serviceImpl.Status)
          .AddMethod(__Method_Crash, serviceImpl.Crash)
          .AddMethod(__Method_Freeze, serviceImpl.Freeze)
          .AddMethod(__Method_Unfreeze, serviceImpl.Unfreeze).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PuppetMasterServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ReplicationFactor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PuppetMaster.ReplicationFactorRequest, global::PuppetMaster.ReplicationFactorReply>(serviceImpl.ReplicationFactor));
      serviceBinder.AddMethod(__Method_Partition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PuppetMaster.PartitionRequest, global::PuppetMaster.PartitionReply>(serviceImpl.Partition));
      serviceBinder.AddMethod(__Method_Status, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PuppetMaster.StatusRequest, global::PuppetMaster.StatusReply>(serviceImpl.Status));
      serviceBinder.AddMethod(__Method_Crash, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PuppetMaster.CrashRequest, global::PuppetMaster.CrashReply>(serviceImpl.Crash));
      serviceBinder.AddMethod(__Method_Freeze, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PuppetMaster.FreezeRequest, global::PuppetMaster.FreezeReply>(serviceImpl.Freeze));
      serviceBinder.AddMethod(__Method_Unfreeze, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PuppetMaster.UnfreezeRequest, global::PuppetMaster.UnfreezeReply>(serviceImpl.Unfreeze));
    }

  }
}
#endregion
